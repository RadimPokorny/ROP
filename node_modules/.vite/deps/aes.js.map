{
  "version": 3,
  "sources": ["../../aes/lib/aes.js"],
  "sourcesContent": ["\n\nmodule.exports = AES;\n\n//@param {Array} key The key as an array of 4, 6 or 8 words.\nfunction AES (key) {\n  if (!this._tables[0][0][0]) this._precompute();\n  \n  var tmp, encKey, decKey;\n  var sbox = this._tables[0][4];\n  var decTable = this._tables[1];\n  var keyLen = key.length; \n  var rcon = 1;\n  \n  if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n    throw new Error(\"invalid aes key size\");\n  }\n  \n  this._key = [encKey = key.slice(0), decKey = []];\n  \n  // schedule encryption keys\n  for (var i = keyLen; i < 4 * keyLen + 28; i++) {\n    tmp = encKey[i-1];\n    \n    // apply sbox\n    if (i % keyLen === 0 || (keyLen === 8 && i % keyLen === 4)) {\n      tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255]<< 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n      \n      // shift rows and add rcon\n      if (i % keyLen === 0) {\n        tmp = tmp << 8 ^ tmp >>> 24 ^ rcon<<24;\n        rcon = rcon << 1 ^ (rcon >> 7) * 283;\n      }\n    }\n    \n    encKey[i] = encKey[i-keyLen] ^ tmp;\n  }\n  \n  // schedule decryption keys\n  for (var j = 0; i; j++, i--) {\n    tmp = encKey[j&3 ? i : i - 4];\n    if (i<=4 || j<4) {\n      decKey[j] = tmp;\n    } else {\n      decKey[j] = decTable[0][sbox[tmp>>>24      ]] ^\n                  decTable[1][sbox[tmp>>16  & 255]] ^\n                  decTable[2][sbox[tmp>>8   & 255]] ^\n                  decTable[3][sbox[tmp      & 255]];\n    }\n  }\n};\n\nAES.prototype = {\n  \n  /**\n   * Encrypt an array of 4 big-endian words.\n   * @param {Array} data The plaintext.\n   * @return {Array} The ciphertext.\n   */\n  encrypt:function (data) { return this._crypt(data, 0); },\n  \n  /**\n   * Decrypt an array of 4 big-endian words.\n   * @param {Array} data The ciphertext.\n   * @return {Array} The plaintext.\n   */\n  decrypt:function (data) { return this._crypt(data, 1); },\n  \n  /**\n   * The expanded S-box and inverse S-box tables.  These will be computed\n   * on the client so that we don't have to send them down the wire.\n   *\n   * There are two tables, _tables[0] is for encryption and\n   * _tables[1] is for decryption.\n   *\n   * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n   * last (_tables[01][4]) is the S-box itself.\n   *\n   * @private\n   */\n  _tables: [\n    [ new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256) ],\n    [ new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256) ]\n  ],\n\n  //Expand the S-box tables.\n  _precompute: function () {\n    var encTable = this._tables[0], decTable = this._tables[1],\n       sbox = encTable[4], sboxInv = decTable[4],\n       i, x, xInv, d=new Uint8Array(256), th=new Uint8Array(256), x2, x4, x8, s, tEnc, tDec;\n\n    // Compute double and third tables\n    for (i = 0; i < 256; i++) {\n      th[( d[i] = i<<1 ^ (i>>7)*283 )^i]=i;\n    }\n   \n    for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n      // Compute sbox\n      s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n      s = s >> 8 ^ s & 255 ^ 99;\n      sbox[x] = s;\n      sboxInv[s] = x;\n       \n      // Compute MixColumns\n      x8 = d[x4 = d[x2 = d[x]]];\n      tDec = x8*0x1010101 ^ x4*0x10001 ^ x2*0x101 ^ x*0x1010100;\n      tEnc = d[s]*0x101 ^ s*0x1010100;\n       \n      for (i = 0; i < 4; i++) {\n        encTable[i][x] = tEnc = tEnc<<24 ^ tEnc>>>8;\n        decTable[i][s] = tDec = tDec<<24 ^ tDec>>>8;\n      }\n    }\n  },\n  \n  /**\n   * Encryption and decryption core.\n   * @param {Array} input Four words to be encrypted or decrypted.\n   * @param dir The direction, 0 for encrypt and 1 for decrypt.\n   * @return {Array} The four encrypted or decrypted words.\n   * @private\n   */\n  _crypt:function (input, dir) {\n    if (input.length !== 4) {\n      throw new Error(\"invalid aes block size\");\n    }\n    \n    var key = this._key[dir],\n        // state variables a,b,c,d are loaded with pre-whitened data\n        a = input[0]           ^ key[0],\n        b = input[dir ? 3 : 1] ^ key[1],\n        c = input[2]           ^ key[2],\n        d = input[dir ? 1 : 3] ^ key[3],\n        a2, b2, c2,\n        \n        nInnerRounds = key.length/4 - 2,\n        i,\n        kIndex = 4,\n        out = new Uint32Array(4),// <--- this is slower in Node.js, about the same in Chrome */ \n        table = this._tables[dir],\n        \n        // load up the tables\n        t0    = table[0],\n        t1    = table[1],\n        t2    = table[2],\n        t3    = table[3],\n        sbox  = table[4];\n \n    // Inner rounds.  Cribbed from OpenSSL.\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = t0[a>>>24] ^ t1[b>>16 & 255] ^ t2[c>>8 & 255] ^ t3[d & 255] ^ key[kIndex];\n      b2 = t0[b>>>24] ^ t1[c>>16 & 255] ^ t2[d>>8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];\n      c2 = t0[c>>>24] ^ t1[d>>16 & 255] ^ t2[a>>8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];\n      d  = t0[d>>>24] ^ t1[a>>16 & 255] ^ t2[b>>8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a=a2; b=b2; c=c2;\n    }\n        \n    // Last round.\n    for (i = 0; i < 4; i++) {\n      out[dir ? 3&-i : i] =\n        sbox[a>>>24      ]<<24 ^ \n        sbox[b>>16  & 255]<<16 ^\n        sbox[c>>8   & 255]<<8  ^\n        sbox[d      & 255]     ^\n        key[kIndex++];\n      a2=a; a=b; b=c; c=d; d=a2;\n    }\n    \n    return out;\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
