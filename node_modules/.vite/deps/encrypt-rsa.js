import {
  require_crypto
} from "./chunk-2NU5X2PS.js";
import {
  __commonJS
} from "./chunk-Y2F7D3TJ.js";

// node_modules/encrypt-rsa/build/utils/helpers.js
var require_helpers = __commonJS({
  "node_modules/encrypt-rsa/build/utils/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encode = exports.decode = void 0;
    var decode = function(str) {
      return Buffer.from(str, "base64").toString("utf-8");
    };
    exports.decode = decode;
    var encode = function(str) {
      return Buffer.from(str, "utf-8").toString("base64");
    };
    exports.encode = encode;
  }
});

// node_modules/encrypt-rsa/build/index.js
var require_build = __commonJS({
  "node_modules/encrypt-rsa/build/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var crypto = __importStar(require_crypto());
    var helpers_1 = require_helpers();
    var NodeRSA = (
      /** @class */
      function() {
        function NodeRSA2(publicKey, privateKey, modulusLength) {
          this.publicKey = publicKey;
          this.privateKey = privateKey;
          this.modulusLength = modulusLength || 2048;
          this.keyBase64 = "";
        }
        NodeRSA2.prototype.encryptStringWithRsaPublicKey = function(args) {
          var text = args.text, _a = args.publicKey, publicKey = _a === void 0 ? this.publicKey : _a;
          var publicKeyDecoded = (0, helpers_1.decode)(this.convertKetToBase64(publicKey));
          var buffer = Buffer.from(text);
          var encrypted = crypto === null || crypto === void 0 ? void 0 : crypto.publicEncrypt(publicKeyDecoded, buffer);
          return encrypted.toString("base64");
        };
        NodeRSA2.prototype.decryptStringWithRsaPrivateKey = function(args) {
          var text = args.text, _a = args.privateKey, privateKey = _a === void 0 ? this.privateKey : _a;
          var privateKeyDecoded = (0, helpers_1.decode)(this.convertKetToBase64(privateKey));
          var buffer = Buffer.from(text, "base64");
          var decrypted = crypto === null || crypto === void 0 ? void 0 : crypto.privateDecrypt(privateKeyDecoded, buffer);
          return decrypted.toString("utf8");
        };
        NodeRSA2.prototype.createPrivateAndPublicKeys = function(modulusLength) {
          if (modulusLength === void 0) {
            modulusLength = this.modulusLength;
          }
          if (typeof crypto.generateKeyPairSync === "function") {
            var _a = crypto.generateKeyPairSync("rsa", {
              modulusLength,
              publicKeyEncoding: {
                type: "spki",
                format: "pem"
              },
              privateKeyEncoding: {
                type: "pkcs8",
                format: "pem"
              }
            }), privateKey = _a.privateKey, publicKey = _a.publicKey;
            return { privateKey, publicKey };
          }
          return { privateKey: "", publicKey: "" };
        };
        NodeRSA2.prototype.convertKetToBase64 = function(key) {
          return (0, helpers_1.encode)(key.replace(/^ +/gm, "") || this.keyBase64);
        };
        return NodeRSA2;
      }()
    );
    exports.default = NodeRSA;
  }
});
export default require_build();
//# sourceMappingURL=encrypt-rsa.js.map
