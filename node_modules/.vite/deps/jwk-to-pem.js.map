{
  "version": 3,
  "sources": ["../../jwk-to-pem/src/b64-to-bn.js", "../../jwk-to-pem/src/asn1/algorithm-identifier.js", "../../jwk-to-pem/src/asn1/public-key-info.js", "../../jwk-to-pem/src/asn1/version.js", "../../jwk-to-pem/src/asn1/private-key-info.js", "../../jwk-to-pem/src/ec.js", "../../jwk-to-pem/src/rsa.js", "../../jwk-to-pem/src/jwk-to-pem.js"],
  "sourcesContent": ["'use strict';\n\nvar BN = require('asn1.js').bignum,\n\tBuffer = require('safe-buffer').Buffer;\n\nmodule.exports = function base64ToBigNum(val, zero) {\n\tvar buf = Buffer.from(val, 'base64');\n\tvar bn = val = new BN(buf, 10, 'be').iabs();\n\tif (zero) {\n\t\tbuf.fill(0);\n\t}\n\treturn bn;\n};\n", "'use strict';\n\nmodule.exports = require('asn1.js').define('AlgorithmIdentifer', /* @this */ function() {\n\tthis.seq().obj(\n\t\tthis.key('algorithm').objid(),\n\t\tthis.key('parameters').optional().any()\n\t);\n});\n", "'use strict';\n\nvar AlgorithmIdentifier = require('./algorithm-identifier');\n\nmodule.exports = require('asn1.js').define('PublicKeyInfo', /* @this */ function() {\n\tthis.seq().obj(\n\t\tthis.key('algorithm').use(AlgorithmIdentifier),\n\t\tthis.key('PublicKey').bitstr()\n\t);\n});\n", "'use strict';\n\nmodule.exports = require('asn1.js').define('Version', /* @this */ function() {\n\tthis.int();\n});\n", "'use strict';\n\nvar AlgorithmIdentifier = require('./algorithm-identifier');\nvar Version = require('./version');\n\nmodule.exports = require('asn1.js').define('PrivateKeyInfo', /* @this */ function() {\n\tthis.seq().obj(\n\t\tthis.key('version').use(Version),\n\t\tthis.key('privateKeyAlgorithm').use(AlgorithmIdentifier),\n\t\tthis.key('privateKey').octstr(),\n\t\tthis.key('attributes').optional().any()\n\t);\n});\n", "'use strict';\n\nvar asn1 = require('asn1.js'),\n\tBuffer = require('safe-buffer').Buffer,\n\tEC = require('elliptic').ec;\n\nvar b64ToBn = require('./b64-to-bn');\n\nvar PublicKeyInfo = require('./asn1/public-key-info'),\n\tPrivateKeyInfo = require('./asn1/private-key-info'),\n\tVersion = require('./asn1/version');\n\nvar ECParameters = asn1.define('ECParameters', /* @this */ function() {\n\tthis.choice({\n\t\tnamedCurve: this.objid()\n\t});\n});\n\nvar ecPrivkeyVer1 = 1;\n\nvar ECPrivateKey = asn1.define('ECPrivateKey', /* @this */ function() {\n\tthis.seq().obj(\n\t\tthis.key('version').use(Version),\n\t\tthis.key('privateKey').octstr(),\n\t\tthis.key('parameters').explicit(0).optional().any(),\n\t\tthis.key('publicKey').explicit(1).optional().bitstr()\n\t);\n});\n\nvar curves = {\n\t'P-256': 'p256',\n\t'P-384': 'p384',\n\t'P-521': 'p521'\n};\n\nvar oids = {\n\t'P-256': [1, 2, 840, 10045, 3, 1, 7],\n\t'P-384': [1, 3, 132, 0, 34],\n\t'P-521': [1, 3, 132, 0, 35]\n};\nvar parameters = {};\nvar algorithms = {};\nObject.keys(oids).forEach(function(crv) {\n\tparameters[crv] = ECParameters.encode({\n\t\ttype: 'namedCurve',\n\t\tvalue: oids[crv]\n\t}, 'der');\n\talgorithms[crv] = {\n\t\talgorithm:  [1, 2, 840, 10045, 2, 1],\n\t\tparameters: parameters[crv]\n\t};\n});\noids = null;\n\nfunction ecJwkToBuffer(jwk, opts) {\n\tif ('string' !== typeof jwk.crv) {\n\t\tthrow new TypeError('Expected \"jwk.crv\" to be a String');\n\t}\n\n\tvar hasD = 'string' === typeof jwk.d;\n\tvar xyTypes = hasD\n\t\t? ['undefined', 'string']\n\t\t: ['string'];\n\n\tif (-1 === xyTypes.indexOf(typeof jwk.x)) {\n\t\tthrow new TypeError('Expected \"jwk.x\" to be a String');\n\t}\n\n\tif (-1 === xyTypes.indexOf(typeof jwk.y)) {\n\t\tthrow new TypeError('Expected \"jwk.y\" to be a String');\n\t}\n\n\tif (opts.private && !hasD) {\n\t\tthrow new TypeError('Expected \"jwk.d\" to be a String');\n\t}\n\n\tvar curveName = curves[jwk.crv];\n\tif (!curveName) {\n\t\tthrow new Error('Unsupported curve \"' + jwk.crv + '\"');\n\t}\n\n\tvar curve = new EC(curveName);\n\n\tvar key = {};\n\n\tvar hasPub = jwk.x && jwk.y;\n\tif (hasPub) {\n\t\tkey.pub = {\n\t\t\tx: b64ToBn(jwk.x, false),\n\t\t\ty: b64ToBn(jwk.y, false)\n\t\t};\n\t}\n\n\tif (opts.private || !hasPub) {\n\t\tkey.priv = b64ToBn(jwk.d, true);\n\t}\n\n\tkey = curve.keyPair(key);\n\n\tvar keyValidation = key.validate();\n\tif (!keyValidation.result) {\n\t\tthrow new Error('Invalid key for curve: \"' + keyValidation.reason + '\"');\n\t}\n\n\tvar result = keyToPem(jwk.crv, key, opts);\n\n\treturn result;\n}\n\nfunction keyToPem(crv, key, opts) {\n\tvar compact = false;\n\tvar publicKey = key.getPublic(compact, 'hex');\n\tpublicKey = Buffer.from(publicKey, 'hex');\n\tpublicKey = {\n\t\tunused: 0,\n\t\tdata: publicKey\n\t};\n\n\tvar result;\n\tif (opts.private) {\n\t\tvar privateKey = key.getPrivate('hex');\n\t\tprivateKey = Buffer.from(privateKey, 'hex');\n\n\t\tresult = PrivateKeyInfo.encode({\n\t\t\tversion: 0,\n\t\t\tprivateKeyAlgorithm: algorithms[crv],\n\t\t\tprivateKey: ECPrivateKey.encode({\n\t\t\t\tversion: ecPrivkeyVer1,\n\t\t\t\tprivateKey: privateKey,\n\t\t\t\tparameters: parameters[crv],\n\t\t\t\tpublicKey: publicKey\n\t\t\t}, 'der')\n\t\t}, 'pem', {\n\t\t\tlabel: 'PRIVATE KEY'\n\t\t});\n\n\t\tprivateKey.fill(0);\n\t} else {\n\t\tresult = PublicKeyInfo.encode({\n\t\t\talgorithm: algorithms[crv],\n\t\t\tPublicKey: publicKey\n\t\t}, 'pem', {\n\t\t\tlabel: 'PUBLIC KEY'\n\t\t});\n\t}\n\n\t// This is in an if incase asn1.js adds a trailing \\n\n\t// istanbul ignore else\n\tif ('\\n' !== result.slice(-1)) {\n\t\tresult += '\\n';\n\t}\n\n\treturn result;\n}\n\nmodule.exports = ecJwkToBuffer;\n", "'use strict';\n\nvar asn1 = require('asn1.js');\n\nvar b64ToBn = require('./b64-to-bn');\n\nvar PublicKeyInfo = require('./asn1/public-key-info'),\n\tPrivateKeyInfo = require('./asn1/private-key-info'),\n\tVersion = require('./asn1/version');\n\nvar RSAPrivateKey = asn1.define('RSAPrivateKey', /* @this */ function() {\n\tthis.seq().obj(\n\t\tthis.key('version').use(Version),\n\t\tthis.key('modulus').int(),\n\t\tthis.key('publicExponent').int(),\n\t\tthis.key('privateExponent').int(),\n\t\tthis.key('prime1').int(),\n\t\tthis.key('prime2').int(),\n\t\tthis.key('exponent1').int(),\n\t\tthis.key('exponent2').int(),\n\t\tthis.key('coefficient').int()\n\t);\n});\n\nvar RSAPublicKey = asn1.define('RSAPublicKey', /* @this */ function() {\n\tthis.seq().obj(\n\t\tthis.key('modulus').int(),\n\t\tthis.key('publicExponent').int()\n\t);\n});\n\nvar algorithm = {\n\talgorithm: [1, 2, 840, 113549, 1, 1, 1],\n\tparameters: [5, 0]\n};\n\nfunction rsaJwkToBuffer(jwk, opts) {\n\tif ('string' !== typeof jwk.e) {\n\t\tthrow new TypeError('Expected \"jwk.e\" to be a String');\n\t}\n\n\tif ('string' !== typeof jwk.n) {\n\t\tthrow new TypeError('Expected \"jwk.n\" to be a String');\n\t}\n\n\tif (opts.private) {\n\t\tif ('string' !== typeof jwk.d) {\n\t\t\tthrow new TypeError('Expected \"jwk.d\" to be a String');\n\t\t}\n\n\t\tif ('string' !== typeof jwk.p) {\n\t\t\tthrow new TypeError('Expected \"jwk.p\" to be a String');\n\t\t}\n\n\t\tif ('string' !== typeof jwk.q) {\n\t\t\tthrow new TypeError('Expected \"jwk.q\" to be a String');\n\t\t}\n\n\t\tif ('string' !== typeof jwk.dp) {\n\t\t\tthrow new TypeError('Expected \"jwk.dp\" to be a String');\n\t\t}\n\n\t\tif ('string' !== typeof jwk.dq) {\n\t\t\tthrow new TypeError('Expected \"jwk.dq\" to be a String');\n\t\t}\n\n\t\tif ('string' !== typeof jwk.qi) {\n\t\t\tthrow new TypeError('Expected \"jwk.qi\" to be a String');\n\t\t}\n\t}\n\n\tvar pem;\n\tif (opts.private) {\n\t\tpem = PrivateKeyInfo.encode({\n\t\t\tversion: 0,\n\t\t\tprivateKeyAlgorithm: algorithm,\n\t\t\tprivateKey: RSAPrivateKey.encode({\n\t\t\t\tversion: 0,\n\t\t\t\tmodulus: b64ToBn(jwk.n, false),\n\t\t\t\tpublicExponent: b64ToBn(jwk.e, false),\n\t\t\t\tprivateExponent: b64ToBn(jwk.d, true),\n\t\t\t\tprime1: b64ToBn(jwk.p, true),\n\t\t\t\tprime2: b64ToBn(jwk.q, true),\n\t\t\t\texponent1: b64ToBn(jwk.dp, true),\n\t\t\t\texponent2: b64ToBn(jwk.dq, true),\n\t\t\t\tcoefficient: b64ToBn(jwk.qi, true)\n\t\t\t}, 'der')\n\t\t}, 'pem', {\n\t\t\tlabel: 'PRIVATE KEY'\n\t\t});\n\t} else {\n\t\tpem = PublicKeyInfo.encode({\n\t\t\talgorithm: algorithm,\n\t\t\tPublicKey: {\n\t\t\t\tunused: 0,\n\t\t\t\tdata: RSAPublicKey.encode({\n\t\t\t\t\tmodulus: b64ToBn(jwk.n, false),\n\t\t\t\t\tpublicExponent: b64ToBn(jwk.e, false)\n\t\t\t\t}, 'der')\n\t\t\t}\n\t\t}, 'pem', {\n\t\t\tlabel: 'PUBLIC KEY'\n\t\t});\n\t}\n\n\t// This is in an if incase asn1.js adds a trailing \\n\n\t// istanbul ignore else\n\tif ('\\n' !== pem.slice(-1)) {\n\t\tpem += '\\n';\n\t}\n\n\treturn pem;\n}\n\nmodule.exports = rsaJwkToBuffer;\n", "'use strict';\n\nvar ec = require('./ec'),\n\trsa = require('./rsa');\n\n/**\n *\n * @param {{kty:'EC', crv:string, d:string, x?:string, y?:string} | {kty:'EC', crv:string, x:string, y:string} | {kty:'RSA', e:string, n:string, d?:string, p?:string, q?:string, dp?:string, dq?:string, qi?:string}} jwk\n * @param {{private:boolean}=} opts\n * @returns {string}\n */\nfunction jwkToBuffer(jwk, opts) {\n\tif ('object' !== typeof jwk || null === jwk) {\n\t\tthrow new TypeError('Expected \"jwk\" to be an Object');\n\t}\n\n\tvar kty = jwk.kty;\n\tif ('string' !== typeof kty) {\n\t\tthrow new TypeError('Expected \"jwk.kty\" to be a String');\n\t}\n\n\topts = opts || {};\n\topts.private = opts.private === true;\n\n\tswitch (kty) {\n\t\tcase 'EC': {\n\t\t\treturn ec(jwk, opts);\n\t\t}\n\t\tcase 'RSA': {\n\t\t\treturn rsa(jwk, opts);\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Error('Unsupported key type \"' + kty + '\"');\n\t\t}\n\t}\n}\n\nmodule.exports = jwkToBuffer;\n"],
  "mappings": "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",
  "names": []
}
